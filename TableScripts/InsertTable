#! /usr/bin/bash

export LC_COLLATE=C
shopt -s extglob

#fetch DB
ParentDB=$1

echo Data Base Tables :

#list Database Tables
ls ./DBs/$ParentDB/ | grep -v '^schema_'

#ask for the Table name
read -p "Enter table name you wanna insert into (case-sensitive) : " TableName

# check if table exists or not properly

if [ ! -f "DBs/$ParentDB/$TableName" ]; then
    echo Table Not Found
    source ./TableScripts/TableMenu.sh
fi

#define arrays to store schema and data
declare -A ImportedSchema
declare -a TableData=()

#store files in variables
schema_file="./DBs/$ParentDB/schema_$TableName"
table_file="./DBs/$ParentDB/$TableName"

# get data from schema_TableName store in associative array
eval "$(awk -F':' 'NR>2 { printf "ImportedSchema[%s]=%s\n", $1, $2 }' $schema_file)"

#get primary key index
pk=$(head -n 1 $schema_file)

# for loop over keys of associative array and check if values of every iteration == type of data user enters
count=1
for key in "${!ImportedSchema[@]}"; do
    echo "Enter ($key) value : "
    read cell
    case $cell in
    +([1-9])) # accept numbers only and (doesn't start with zero)
        type=int
        ;;
    +([a-zA-Z])) #accept pure string or start with _
        type=string
        ;;
    *)
        echo "W e i r d   I n p u t"
        source ./TableScripts/TableMenu.sh
        ;;
    esac

    # if the field is primary key
    if [[ $count -eq $pk ]]; then
        #check if primary key already exist
        flag=$(awk 'BEGIN{FS=":";f=0} {if($'$pk' == "'$cell'") {f=1}} END{print f}' $table_file)

        if [[ $flag -eq 1 ]]; then
            echo The field is primary key and value already exists
            source ./TableScripts/TableMenu.sh
        fi
    fi

    echo "$type"
    echo
    echo ${ImportedSchema[$key]}
    #check type equals value or not
    if [[ $type = ${ImportedSchema[$key]} ]]; then
        # save every value on a separate line
        if [[ $count -eq 1 ]]; then
            TableData=$cell
        else
            TableData=$TableData:$cell
        fi
    else
        echo Wrong Datatype
        source ./TableScripts/TableMenu.sh
    fi
    #increment it so we can sperarate values with ":"
    ((count = $count + 1))
done

#show the entered values
echo "${TableData[@]}"

for data in "${TableData[@]}"; do
    echo -n "$data" >>"./DBs/$ParentDB/$TableName"
done

# write into table
echo >>"./DBs/$ParentDB/$TableName" # append a new line

#free the used variables
unset ImportedSchema
unset TableData
