#! /bin/bash

export LC_COLLATE=C 
shopt -s extglob


read -p "Enter Table name : " tname

DB=$1

# Validation for file existance
if [[ -f "./DBs/$DB/$tname" || -z $tname || $tname =~ ^[0-9] ]]
    then
    echo Table already exists or empty value or starts with number
    source ./TableScripts/TableMenu.sh
fi

# create Table files 
touch "./DBs/$DB/$tname"
touch "./DBs/$DB/schema_$tname"

read -p "Enter Number of columns : " colnum

#check if colnum is integer or NULL
if ! [[ $colnum =~ ^[0-9]+$ ]]
then 
echo Wrong datatype or null
rm "./DBs/$DB/$tname"
rm "./DBs/$DB/schema_$tname"
source ./TableScripts/TableMenu.sh
fi

declare -A schema=(["Column"]="DataType")  # -A means associative array

# validate number of columns is number(integer) = $colnum
flag=0
for ((i = 0; i < $colnum; i++)); do
    
    # Ask for field name
    read -p "Enter column name : " fname
    
    #check if field name is string if not then decrement i
    
    if [[ $fname != +([a-zA-Z]) ]]
     then
        echo field name is not valid Try again
        ((i=$i-1))
        continue
    fi
    
    # Ask if field is primary key
    read -p "Do you want to use this column as a primary key ?? [y|Y OR n|N] " ans
    
    if [[ $ans = [yY] && $flag != 1 ]]
    then
        ((pkey=$i+1))
        flag=1 # raise flag so we cant specify more than one pk
        echo "$fname is set as a primary key"
    else
    echo there is already a primary key
    fi
    
    echo Enter Data type of column :
    
    # check datatype of columns
    select dtype in string int; do
        case $dtype in
            string)
                dtype="string"
                schema+=([$fname]=$dtype) > "./DBs/$DB/schema_$tname"
                break
            ;;
            int)
                dtype="int"
                schema+=([$fname]=$dtype) > "./DBs/$DB/schema_$tname"
                break
            ;;
            *)
                echo Wrong input
            ;;
        esac        

    done
    
done

echo Table created successfully

output_file="./DBs/$DB/schema_$tname"


# write into table 
echo $pkey  >> "$output_file"

for key in "${!schema[@]}"; do
    echo "$key:${schema[$key]}" >> "$output_file"
done

unset schema


