#! /bin/bash

export LC_COLLATE=C
shopt -s extglob
source ./TableScripts/HelperFunctions

read -p "Enter Table name : " tname

DB=$1

# Validation for file existance
if [[ -f "./DBs/$DB/$tname" || -z $tname || $tname =~ ^[0-9] || $tname =~ [[:space:]] ]]
then
    echo Table already exists or empty value or starts with number
    source ./TableScripts/TableMenu.sh
fi

# create Table files
touch "./DBs/$DB/$tname"
touch "./DBs/$DB/schema_$tname"

read -p "Enter Number of columns : " colnum

#check if colnum is not an integer or NULL
if ! [[ $colnum =~ ^[1-9]+$ ]]
then
    echo Wrong datatype or null
    rm "./DBs/$DB/$tname"
    rm "./DBs/$DB/schema_$tname"
    source ./TableScripts/TableMenu.sh
fi

declare -A schema=(["Column"]="DataType")  # -A means associative array

# validate number of columns is number(integer) = $colnum
flag=false
for ((i = 0; i < $colnum; i++)); do
    
    # Ask for field name
    read -p "Enter column name : " fname
    
    #check if field name is string if not then decrement i
    
    if [[ $fname != +([a-zA-Z]) ]]
    then
        echo field name is not valid Try again
        ((i=$i-1))
        continue
    fi
    
    # Ask if field is primary key
    checkPrimaryKey
    
    echo Enter Data type of column :
    
    

    # check datatype of columns
   select dtype in string int; do
        case $dtype in
            string)
                dtype="string"
                schema+=([$fname]=$dtype)
                break
            ;;
            int)
                dtype="int"
                schema+=([$fname]=$dtype)
                break
            ;;
            *)
                echo Wrong input
            ;;
        esac
    done
    
done

echo Table created successfully

output_file="./DBs/$DB/schema_$tname"

# write into table
echo $pkey  >> "$output_file"

for key in "${!schema[@]}"; do
    echo "$key:${schema[$key]}" >> "$output_file"
done
